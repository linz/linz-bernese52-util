#!/usr/bin/gnss_ftp_mirror -v
# Example configuration file:
#
# Note all configuration item values can contain references to other configuration
# item values as {xxxxx}, where xxx is the other item.  But note special values
# for date components and file names that should not be used.

# Organisation directory for sitelogs

orgdir=geonet
basedir={ENV:D}/sitelogs/{orgdir}

# RemoteUri is the the base of the remote directory

RemoteUri=ftp://ftp.geonet.org.nz/gps

RemoteUser=anonymous

RemotePassword=positionz@linz.govt.nz

TimeOut 30

# Delay in seconds added after each successful download to be polite to server

DownloadWait 1

# If a download fails the script will try to reconnect to the server
# The following options control the reconnection 

MaxReconnectionTries 5

# Time delay in seconds between reconnection attempts

ReconnectionWait 5

# Auto reconnect after specified number of downloads

MaxDownloadsPerConnection 100

# Maximum runtime in minutes - once this time has expired the job will finish

MaxRunTime 120

# StatusFile - if this is defined then at the completion of the run there
# will be a file named either xxx.success or xxx.fail.  The age of this can
# be tested with the MinTimeSinceLastRun option.  This specifies either a 
# single time, or two times (since success and since failure).  Time can
# be followed by h or d for hours or days (eg 5d).  Default is hours.  
# If the script is run sooner than the minimum time then it will stop 
# immediately.

StatusFile {basedir}/.mirror_status
MinTimeSinceLastRun 20h 4h

# RemotePath is the path to the files to download.
#
# Can include {yyyy},{yy},{mmmm}, {mmm},{mm},{ddd},{dd} which will map to 
# the corresponding date strings (mmm is 3 letter month name, mmmm is the 
# full month name). Will also accept Mmm, MMM, Mmmm, MMMM for different 
# capitalisation.

# Also can accept {code} or {CODE} for upper or lower case four character
# codes which will match a valid code. Use {Code} for a case insensitive
# code match.
# 
# These will be replaced with values corresponding to the maximum number
# of days before the current date to process.  Can also include ? for any
# character, and * for any set of characters.

RemoteDir=/sitelogs/xml

# RemoteFileRe.  Remote file names are matched against this regular expression.
# Files that match are candidates for downloading.  
# This can include any of the time and code components, eg {ddd}. Also it
# can include regular expression # capture groups (?<xxx>...) to capture 
# fields that can be used in the target path.  

RemoteFileRe={code}*.xml

# Target directory.  This can be based absolute, or relative to the location
# of the configuration file (defined as ~).  Can include time components
# as for RemovePath.  Can also include {filename} to use the source filename.

TargetPath={basedir}/{filename}

# Marker file.  By default the script checks for the existence of the target 
# file.  If it exists and is of the correct size it is downloaded again.  The 
# script can instead use a marker file into which the downloaded size is written.
# This allows the downloaded file to be removed or otherwise changed without 
# being reprocessed.

#MarkerPath=~/{yyyy}/{ddd}/{filename}.downloaded

# Processing script. Command to run once a file has been downloaded.  The script
# is run in the target directory.  The command can include parameters, and can
# include the replacement strings for filename, code, etc.
#
# If PostDownloadCommandChDir evaluates to true then the script changes to the 
# download directory to execute the command.

#PostDownloadCommand process_downloaded_file.sh {filename}
PostDownloadCommandChDir 1

# Codes to download.  Use Codes * (or omit codes altogether), to download
# all available codes.

Codes *

# Number of days before current date to start and end download
# Set the same if the download is insensitive to date...

StartAge 1
EndAge 1
