#!/usr/bin/gnss_ftp_mirror -v
# Example configuration file:
#
# Note all configuration item values can contain references to other configuration
# item values as {xxxxx}, where xxx is the other item.  But note special values
# for date components and file names that should not be used.
#
# {xxxx} strings that are not matched can be replaced by environment variables if
# they exist, except for the code and time patterns listed below, which are 
# replaced with components of the file path.
#
# {ENV:xxx} can be used to explicitly replace environment variables.
# 
# {ConfigDir} and {ConfigFile} refer to the directory of this configuration
# file and the full path of the configuration file.
#
# Configuration items can be included from another file using:
#
# include filename
#
# Filenames are relative to this configuration file.

# Organisation directory for sitelogs

orgdir=geonet

# RemoteUri is the the base of the remote directory

RemoteUri=https://data.geonet.org.nz/gnss/sitelogs/logs

DirectoryListUrl=
DirectoryListRe=
FileListUrl={curdir}/?list
FileListRe ^\s*\<a.*?\>(?<filename>\S+?)\<\/a\>\s+(?<filedate>\d\d\-\w\w\w-\d\d\d\d\s+\d\d\:\d\d)\s+(?<filesize>\d+)\s*$

RemoteUser=
RemotePassword=

TimeOut 60

# StatusFile - if this is defined then at the completion of the run there
# will be a file named either xxx.success or xxx.fail.  The age of this can
# be tested with the MinTimeSinceLastRun option.  This specifies either a 
# single time, or two times (since success and since failure).  Time can
# be followed by h or d for hours or days (eg 5d).  Default is hours.  
# If the script is run sooner than the minimum time then it will stop 
# immediately.

StatusFile {orgdir}/.mirror_status
MinTimeSinceLastRun 20h 4h

# RemoteDir is the path to the files to download.
#
# Can include {yyyy},{yy},{mmmm}, {mmm},{mm},{ddd},{dd} which will map to 
# the corresponding date strings (mmm is 3 letter month name, mmmm is the 
# full month name). Will also accept Mmm, MMM, Mmmm, MMMM for different 
# capitalisation.

# Also can accept {code} or {CODE} for upper or lower case four character
# codes which will match a valid code. Use {Code} for a case insensitive
# code match.
# 
# These will be replaced with values corresponding to the maximum number
# of days before the current date to process.  Can also include ? for any
# character, and * for any set of characters.

RemoteDir=

# RemoteFileRe.  Remote file names are matched against this regular expression.
# Files that match are candidates for downloading.  
# This can include any of the time and code components, eg {ddd}. Also it
# can include regular expression # capture groups (?<xxx>...) to capture 
# fields that can be used in the target path.  

RemoteFileRe={code}*.log

# Local base directory.  All files downloaded or created by subsequent scripts
# should be subdirectories of this directory. Use ~ for the directory in which
# the configuration script is located.  This is not used if the target is an S3
# bucket.  However the script will create a temporary local directory for retrieving
# and processing files prior to uploading to S3. 
#
# All local filenames below are relative to this (or on S3, relative to the S3 prefix)
# Post download script are run from this directory unless PostDownloadCommandChDir 
# is true.

LocalBaseDirectory {ENV:BERNESE_DATAPOOL}/sitelogs/

# If an S3 bucket is defined then files are installed into the bucket using the 
# file structure relative to the LocalBaseDirectory.  The file names can be prefixed
# with a common prefix to generate the corresponding S3 bucket key.  S3 settings
# are as used by the LINZ::GNSS::AwsS3Bucket module.  

# s3_bucket my_bucket
# s3_prefix ${subdir}${subdir?/}

# Target directory relative to the local base directory.
# Can include time components
# as for RemotePath.  Can also include {filename} to use the source filename.

TargetPath={orgdir}/{filename}

# Marker file.  By default the script checks for the existence of the target 
# file.  If it exists and is of the correct size it is downloaded again.  The 
# script can instead use a marker file into which the downloaded size is written.
# This allows the downloaded file to be removed or otherwise changed without 
# being reprocessed.

#MarkerPath=~/{yyyy}/{ddd}/{filename}.downloaded

# Processing script. Command to run once a file has been downloaded.  The script
# is run in the target directory.  The command can include parameters, and can
# include the replacement strings for filename, code, etc.
#
# If PostDownloadCommandChDir evaluates to true then the script changes to the 
# download directory to execute the command.

#PostDownloadCommand process_downloaded_file.sh {filename}
PostDownloadCommandChDir 1

# Codes to download.  Use Codes * (or omit codes altogether), to download
# all available codes.

Codes *

# Number of days before current date to start and end download
# Set the same if the download is insensitive to date...

StartAge 1
EndAge 1
